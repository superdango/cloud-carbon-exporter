name: test, build and push
on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

env:
  IMAGE_NAME: cloud-carbon-exporter

jobs:
  go-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # if go fmt format files, it returns one line by modified files on stdout.
      # If line count is greater than 0, exit with error code 1 to stop the workflow.
      - name: validate go formatting
        uses: docker://golang:latest
        with:
          entrypoint: /bin/bash
          # args: -c "if [ \"$(go fmt ./... | wc -l)\" -gt 0 ]; then echo \"Source code not formatted\" && exit 1; fi"
          args: -c "exit $(go fmt ./... | wc -l)"

  docker-build-push:
    runs-on: ubuntu-latest
    needs: go-fmt
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: push image
        run: |
          # construct the image ID with github registry
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

          # This strips the git ref prefix from the version.
          echo "${{ github.ref }}" # debug 
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # This uses the Docker `latest` tag convention if branch is main
          [ "$VERSION" == "main" ] && VERSION=latest

          # This uses the pull request branch name in the event of a pull request (branch merge)
          # replacing all slashes (/) by underscores (_)
          [ "$VERSION" == "merge" ] && VERSION="pr-$(echo $GITHUB_HEAD_REF | tr "\/" "-" )"

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: "${{env.IMAGE_ID}}:${{env.VERSION}},${{env.IMAGE_ID}}:${{env.SHORT_SHA}}"